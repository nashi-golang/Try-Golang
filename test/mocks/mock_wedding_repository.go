// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/wedding_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "try-golang/internal/models"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockWeddingRepository is a mock of WeddingRepository interface.
type MockWeddingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWeddingRepositoryMockRecorder
}

// MockWeddingRepositoryMockRecorder is the mock recorder for MockWeddingRepository.
type MockWeddingRepositoryMockRecorder struct {
	mock *MockWeddingRepository
}

// NewMockWeddingRepository creates a new mock instance.
func NewMockWeddingRepository(ctrl *gomock.Controller) *MockWeddingRepository {
	mock := &MockWeddingRepository{ctrl: ctrl}
	mock.recorder = &MockWeddingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeddingRepository) EXPECT() *MockWeddingRepositoryMockRecorder {
	return m.recorder
}

// CreateWedding mocks base method.
func (m *MockWeddingRepository) CreateWedding(wedding *models.Wedding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWedding", wedding)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWedding indicates an expected call of CreateWedding.
func (mr *MockWeddingRepositoryMockRecorder) CreateWedding(wedding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWedding", reflect.TypeOf((*MockWeddingRepository)(nil).CreateWedding), wedding)
}

// DeleteWedding mocks base method.
func (m *MockWeddingRepository) DeleteWedding(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWedding", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWedding indicates an expected call of DeleteWedding.
func (mr *MockWeddingRepositoryMockRecorder) DeleteWedding(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWedding", reflect.TypeOf((*MockWeddingRepository)(nil).DeleteWedding), id)
}

// GetAllWeddings mocks base method.
func (m *MockWeddingRepository) GetAllWeddings() ([]models.Wedding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWeddings")
	ret0, _ := ret[0].([]models.Wedding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWeddings indicates an expected call of GetAllWeddings.
func (mr *MockWeddingRepositoryMockRecorder) GetAllWeddings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWeddings", reflect.TypeOf((*MockWeddingRepository)(nil).GetAllWeddings))
}

// GetWeddingByID mocks base method.
func (m *MockWeddingRepository) GetWeddingByID(id uuid.UUID) (*models.Wedding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeddingByID", id)
	ret0, _ := ret[0].(*models.Wedding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeddingByID indicates an expected call of GetWeddingByID.
func (mr *MockWeddingRepositoryMockRecorder) GetWeddingByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeddingByID", reflect.TypeOf((*MockWeddingRepository)(nil).GetWeddingByID), id)
}

// UpdateWedding mocks base method.
func (m *MockWeddingRepository) UpdateWedding(wedding *models.Wedding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWedding", wedding)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWedding indicates an expected call of UpdateWedding.
func (mr *MockWeddingRepositoryMockRecorder) UpdateWedding(wedding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWedding", reflect.TypeOf((*MockWeddingRepository)(nil).UpdateWedding), wedding)
}
